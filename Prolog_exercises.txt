Ex 1.3: search_two(Elem, List)

search_two(X, cons(X, cons(_, cons(X, _)))).
search_two(X, cons(_, T)) :- search_two(X, T).

----------------------------------------------------------------

Ex 1.4: search_anytwo(Elem, List)

search (X , cons (X , _)).
search (X , cons (_ , T)) :- search (X , T).

search_anytwo(X, cons(X, T)) :- search(X, T).
search_anytwo(X, cons(_, T)) :- search_anytwo(X, T).

----------------------------------------------------------------

Ex 2.1: size(List, Size)

size(nil, zero).
size(cons(_, T), s(X)) :- size(T, X).

----------------------------------------------------------------

Ex 2.2: sum_list(List, Sum)

add(zero, Y, Y).
add(s(X), Y, s(Z)) :- add(X, Y, Z).

sum_list(nil, zero).
sum_list(cons(H, T), R) :- sum_list(T, P), add(H, P, R).

----------------------------------------------------------------

Ex 2.4: max(List, Max)

greater_or_equal(s(_), zero).
greater_or_equal(s(X), s(Y)) :- greater_or_equal(X, Y).
greater_or_equal(zero, zero).

max(nil, Max, Max).
max(cons(H, T), TempMax, Max) :-
		max(T, H, Max),
    greater_or_equal(H, TempMax).
max(cons(H, T), TempMax, Max) :-
		max(T, TempMax, Max),
    greater_or_equal(TempMax, H).

max(cons(H, T), Max) :- max(T, H, Max).

----------------------------------------------------------------

Ex 3.1: same(List1, List2)

same(nil, nil).
same(cons(H, T1), cons(H, T2)) :- same(T1, T2).

----------------------------------------------------------------

Ex 3.2: all_bigger(List1, List2)

greater(s(_), zero).
greater(s(X), s(Y)) :- greater(X, Y).

all_bigger(nil, nil).
all_bigger(cons(H1, T1), cons(H2, T2)) :-
	all_bigger(T1, T2),
	greater(H1, H2).

----------------------------------------------------------------

Ex 3.3: sublist(List1, List2)

sublist(nil, L2).
sublist(cons(H, T), L2) :-
	sublist(T, L2),
	search(H, L2).

----------------------------------------------------------------

Ex 4.2: seqR(N, List)

seqR(zero, cons(zero, nil)).
seqR(s(H), cons(s(H), T)) :- seqR(H, T).

----------------------------------------------------------------

Ex 4.3: seqR2

last(nil, X, cons(X, nil)).
last(cons(H1, T1), X, cons(H2, T2)) :- last(T1, X, T2).

seqR2(zero, nil).
seqR2(s(N), R) :-
	seqR2(N, T),
	last(T, N, R).

----------------------------------------------------------------


